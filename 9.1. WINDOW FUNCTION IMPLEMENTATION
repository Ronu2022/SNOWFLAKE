USE DATABASE RM_WINDOWFUNC;

CREATE OR REPLACE TABLE EMPLOYEE
(
 EMPID INTEGER NOT NULL PRIMARY KEY,
 EMP_NAME VARCHAR2(20),
 JOB_ROLE STRING,
 SALARY NUMBER(10,2)
);

INSERT INTO EMPLOYEE
VALUES('101','ANAND JHA','Analyst',50000);
INSERT INTO EMPLOYEE
VALUES(102,'ALex', 'Data Enginner',60000);
INSERT INTO EMPLOYEE
VALUES(103,'Ravi', 'Data Scientist',48000);
INSERT INTO EMPLOYEE
VALUES(104,'Peter', 'Analyst',98000);
INSERT INTO EMPLOYEE
VALUES(105,'Pulkit', 'Data Scientist',72000);
INSERT INTO EMPLOYEE
VALUES(106,'Robert','Analyst',100000);
INSERT INTO EMPLOYEE
VALUES(107,'Rishabh','Data Engineer',67000);
INSERT INTO EMPLOYEE
VALUES(108,'Subhash','Manager',148000);
INSERT INTO EMPLOYEE
VALUES(109,'Michaeal','Manager',213000);
INSERT INTO EMPLOYEE
VALUES(110,'Dhruv','Data Scientist',89000);
INSERT INTO EMPLOYEE
VALUES(111,'Amit Sharma','Analyst',72000);

SELECT * FROM employee;

update employee
set job_role = 'Data Engineer' where empid = 102;

update employee
set emp_name = 'Anand Jha' where empid = 101;

SELECT * FROM employee;


-- display total salary based on job profile

SELECT job_role,SUM(salary) AS total_salary FROM employee GROUP BY job_role;

-- display total salary along all the records row value
SELECT * FROM employee;

SELECT *,SUM(salary) OVER () AS total_salary FROM employee; -- note so without orderby also it operates.



-- display total salary, %contribution  along all the records row value
SELECT *,SUM(salary) OVER () AS total_salary,
ROUND((salary/total_salary)*100,2) perc_contribution
FROM employee
ORDER BY perc_contribution DESC;

---------------------------------------------------------------------------------------------------------
-- display total salary per job category for all rows

SELECT *, SUM(salary) OVER (PARTITION BY job_role ) AS x 
FROM employee;

SELECT *, SUM(salary) OVER (PARTITION BY job_role  order by emp_name) AS x
FROM employee; -- if you see this there are irregularities 


-- Thus intriduced window frame
SELECT *, 
SUM(salary) OVER (PARTITION BY job_role  order by emp_name ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x -- this is from the preceding rows uptil current row
FROM employee -- here  it partitions by job_role within which the emp_name is arranged aphabetically
-- for eg : analyst - the first is Amit Sharma his salary 72000 before Amit Sharma no preceding rows
-- hence  x = 72000, then comes Anand Jha (current Row), preceeding row (amit sharma)
-- hence x for Anand Jha = 72000(AMit Sharma) + 50000 (Anand Jha) = 122000
-- The real problem is in snowflake they are not ordered as per orderby in the window func unlike mysql
-- Thus, an external order by is required 

SELECT *, 
SUM(salary) OVER (PARTITION BY job_role  order by emp_name ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM employee
ORDER BY job_role, emp_name ASC ;


-- Let's say we want this rolling sum but in opposite way i.e the first one must have the sum of all
-- following it 

SELECT *, 
SUM(salary) OVER (PARTITION BY job_role  order by emp_name ASC ROWS BETWEEN CURRENT ROW  AND UNBOUNDED FOLLOWING) AS x FROM employee
ORDER BY job_role, emp_name ASC ;



-- Try with descending also

SELECT *, SUM(salary) OVER (PARTITION BY job_role  order by empid DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x
FROM employee
ORDER BY job_role, empid desc;

---------------------------------------------------------------------------------------------------------
                      -- DISPLAY THE MAX SALARY PER JOB CATEGORY FOR ALL THE ROWS
---------------------------------------------------------------------------------------------------------
select * from employee;                                                                                 select *, max(salary) over (partition by job_role ) as max_salary from employee 
order by job_role,empid;

-- check what if we use orderby within 
select *, 
max(salary) over (partition by job_role order by emp_name rows between unbounded preceding and current row ) as max_salary 
from employee  -- same concept applies
order by job_role,emp_name; -- orderby for the same reason as above
                                                                                                         
                                                                                                         -- in the above let's calculate the %                                                                    
select *,
max(salary) over (partition by job_role order by emp_name rows between unbounded preceding and current row) as max_salary,
round((salary / max_salary) * 100, 2) as percent_share
from employee
order by job_role,emp_name ASC;

-- show max and min salary department wise

select *,
min(salary) over (partition by job_role ) as min_departmental_salary,
max(salary) over (partition by job_role ) as max_departmental_salary
from employee
order by job_role,emp_name; 
-- This will calculate the min and max salary over the entire partition (entire job role in this case).
-- Therefore we dnt use order by 

-- Total Salary
select *, 
min(salary) over (partition by job_role ) as min_sal,
max(salary) over (partition by job_role) as max_sal,
sum(salary) over (partition by job_role) as dept_sal
from employee
order by job_role;

---------------------------------------------------------------------------------------------------------
                                           -- ROW_NUMBER()
---------------------------------------------------------------------------------------------------------

select *, row_number() OVER (ORDER BY empid) as r_no from employee;

select *, row_number() over (partition by job_role order by empid) as r_no from employee;



select * from
(
  select *, row_number() over (partition by job_role order by salary desc) as r_no from employee
) where r_no = 1; 


---------------------------------------------------------------------------------------------------------
                                             -- Rank()
---------------------------------------------------------------------------------------------------------

select *, 
dense_rank() over (order by salary desc) as ranking 
from employee; 

---------------------------------------------------------------------------------------------------------
                                             -- Case study
---------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TABLE AJ_sales 
(
 customer_id VARCHAR(1),
 order_date DATE,
 product_id INTEGER
);
INSERT INTO AJ_sales
 (customer_id, order_date, product_id)
VALUES
 ('A', '2021-01-01', '1'),
 ('A', '2021-01-01', '2'),
 ('A', '2021-01-07', '2'),
 ('A', '2021-01-10', '3'),
 ('A', '2021-01-11', '3'),
 ('A', '2021-01-11', '3'),
 ('B', '2021-01-01', '2'),
 ('B', '2021-01-02', '2'),
 ('B', '2021-01-04', '1'),
 ('B', '2021-01-11', '1'),
 ('B', '2021-01-16', '3'),
 ('B', '2021-02-01', '3'),
 ('C', '2021-01-01', '3'),
 ('C', '2021-01-01', '3'),
 ('C', '2021-01-07', '3');


CREATE OR REPLACE TABLE AJ_menu 
(
 product_id INTEGER,
 product_name VARCHAR(5),
 price INTEGER
);
INSERT INTO AJ_menu
 (product_id, product_name, price)
VALUES
 ('1', 'sushi', '10'),
 ('2', 'curry', '15'),
 ('3', 'ramen', '12');

CREATE OR REPLACE TABLE AJ_members 
(
 customer_id VARCHAR(1),
 join_date DATE
);

INSERT INTO AJ_members
 (customer_id, join_date)
VALUES
 ('A', '2021-01-07'),
 ('B', '2021-01-09');


Select * from AJ_sales; -- customer_id,order_date,product_id
select * from AJ_menu; -- product_id, product_name, price
select * from AJ_members; -- customer_id, join_date


--What was the first item from the menu purchased by each customer?

SELECT * FROM
(
SELECT customer_id, order_date, product_name, dense_rank() over (partition by customer_id order by order_date ASC) as chronology FROM
(
select s.customer_id,s.order_date, s.product_id,
m.product_name,m.price from AJ_sales as s
left join AJ_menu as m 
on s.product_id = m.product_id
) as alias_table
) as alias_table2 
WHERE chronology = 1
ORDER BY customer_id ASC ,order_date asc, product_name asc; 



--What is the most purchased item on the menu and how many times was it purchased by all customers?

Select * from AJ_sales; -- customer_id,order_date,product_id
select * from AJ_menu; -- product_id, product_name, price
select * from AJ_members; -- customer_id, join_date

SELECT * FROM
(

SELECT *, dense_rank() over (order by no_of_purchase desc) as ranking FROM
(
    select product_name, count(product_name)  as no_of_purchase FROM
    (
        select s.customer_id,s.order_date, s.product_id,
        m.product_name,m.price from AJ_sales as s
        left join AJ_menu as m 
        on s.product_id = m.product_id
    ) 
    group by product_name
    order by no_of_purchase desc

) as alias_table
) as alias_table2 
WHERE ranking = 1; 

---------------------------------------------------------------------------------------------------------

