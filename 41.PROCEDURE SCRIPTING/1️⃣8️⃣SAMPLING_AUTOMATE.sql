// RECALL:

-- SYSTEM/BLOCK SAMPLING:

SELECT  * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER LIMIT 10;
SELECT COUNT(*) FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER; -- 150000 ROWS
SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE(10); -- 15.0K ROWS => ROUGHLY 10 %
SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE(1); -- 1.5 K ROWS => ROUGHLY 1 % -- GOOD FOR LARGE SCALE TABLES


-- BERNOULI SAMPLING:

SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE BERNOULLI(10); -- 14.9K ROWS --> LIKE ROW BY ROW AND THERE IS A TOSS EIOTHER TO INCLUDE IT OR NOT RANDOMLY BYSNWOFLAKE. SINCE EACH ROW IS 
-- CHECKED, IT IS A  BIT SLOWER AND IS GENERALLY GOOD FOR SMALLER TABLES OR MAY BE THE ONES WHERE RANDOM SAMPLING IS REQUIRED TO TEH CORE.


SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE BERNOULLI(10);
SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE BERNOULLI(1); -- 1.5 K ROWS


SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE SYSTEM(10); -- 14.7 K ROWS -> HERE RATHER THAN ROWS AN ENTIRE BLOCK IS SELECTED OR NOT SELECTED =-> GENERALLY FASTER THAN BERNOULLI SAMPLING.


-- SEED WITH SAMPLING:

SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE(0.004); -- IF YOU RE RUN IT, KEEPS ON CHANGING.
-- SUPPOSE YOU CREATED A SAMPLE AND TESTED ON IT, YOU DONT WISH THE SET OF RECORDS TO BE CHANGIN => THATS WHEN YOU GO FOR  SEED TO ENSURE IT DOESNT CHANGE.


SELECT * FROM  SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE(0.004) SEED(122); -- KEEP RUNNING WONT SEE TEH CHANGE
/*C_CUSTKEY
14374
24818
67128
34982 => THESE WERE THE C_CUSTKEY, ORDERS COULD BE DIFFERENTM, BUT THEY WONT CHANGE */


SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER  SAMPLE(0.004) SEED(122);


-- IF YOU NEED FIXED NUMBER OF ROWS, BUT DIFFERENT EVERYTIME, THEN:

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE (4 ROWS);

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER  SAMPLE(4 ROWS); 

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER  SAMPLE(4 ROWS);

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER SAMPLE(4 ROWS);

-----------------------------------------------------------------------------------------------------------------------------------------------------------

// CREATE A NEW DB:

CREATE OR REPLACE DATABASE PROC_SAMPLING;
CREATE OR REPLACE SCHEMA INSERTION_TABLE;
CREATE OR REPLACE SCHEMA PROC_SAMPLING.PROC;
CREATE OR REPLACE SCHEMA PROC_SAMPLING.WORK;

// LOG TABLE CREATION:
CREATE OR REPLACE TABLE PROC_SAMPLING.WORK.SP_ERROR_LOGS
(
    TIME_STAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP,
    PROC_NAME VARCHAR,
    ERROR_TYPE VARCHAR, 
    ERROR_CODE VARCHAR,
    ERROR_MESSAGE VARCHAR, 
    SQL_STATE VARCHAR
    
);


// LETS COPY THE STRUCTURE:

CREATE OR REPLACE TABLE PROC_SAMPLING.INSERTION_TABLE.SAMPLE_DUMMY_TABLE LIKE SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER;

-- LIKE MAKES SURE THE STRUCTURE GETS COPIED WITHOUT ITS ROWS.

SELECT * FROM PROC_SAMPLING.INSERTION_TABLE.SAMPLE_DUMMY_TABLE; -- 0 RECORDS. 




// PROCEDURE:

CREATE OR REPLACE PROCEDURE PROC_SAMPLING.PROC.SAMPLE_PROCEDURE(SOURCE_TB_PARAM VARCHAR, TARGET_TB_PARAM VARCHAR, SAMPLE_TYPE_PARAM VARCHAR, S_NO_PARAM FLOAT)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS CALLER AS
$$
    DECLARE
        SQL_QUERY VARCHAR;
        PER_ERROR EXCEPTION(-20100,'S_NO_PARAM IS IN % VALUE MUST BE > 0 AND <= 100');
        

    BEGIN

        IF(:S_NO_PARAM <= 0 OR :S_NO_PARAM > 100) THEN
            RAISE PER_ERROR;
        END IF;
        
        -- TABLE CREATION IF NOT EXISTS:
        CREATE TABLE IF NOT EXISTS IDENTIFIER(:TARGET_TB_PARAM) LIKE IDENTIFIER (:SOURCE_TB_PARAM);

        IF(:SAMPLE_TYPE_PARAM = 'S') THEN
        
            SQL_QUERY := 'INSERT INTO ' || :TARGET_TB_PARAM || 
                 ' SELECT * FROM ' || :SOURCE_TB_PARAM || 
                 ' SAMPLE SYSTEM (' || :S_NO_PARAM || ')';
                 
        ELSEIF(:SAMPLE_TYPE_PARAM = 'B')   THEN
        
            SQL_QUERY := 'INSERT INTO ' || :TARGET_TB_PARAM || 
                 ' SELECT * FROM ' || :SOURCE_TB_PARAM || 
                 ' SAMPLE BERNOULLI ('||:S_NO_PARAM|| ')';

        ELSE
            SQL_QUERY := 'INSERT INTO ' || :TARGET_TB_PARAM || 
                 ' SELECT * FROM ' || :SOURCE_TB_PARAM || 
                 ' SAMPLE (' || :S_NO_PARAM || ')';
        END IF;

        EXECUTE IMMEDIATE :SQL_QUERY;

    RETURN 'INSERTION SUCCESSFULLY DONE.';

    EXCEPTION 
        WHEN STATEMENT_ERROR THEN INSERT INTO PROC_SAMPLING.WORK.SP_ERROR_LOGS(PROC_NAME, ERROR_TYPE, ERROR_CODE, ERROR_MESSAGE, SQL_STATE)
                                                VALUES('PROC_SAMPLING.PROC.SAMPLE_PROCEDURE','STATEMENT_ERROR',:SQLCODE,:SQLERRM,:SQLSTATE);

        WHEN  PER_ERROR THEN INSERT INTO  PROC_SAMPLING.WORK.SP_ERROR_LOGS(PROC_NAME, ERROR_TYPE, ERROR_CODE, ERROR_MESSAGE, SQL_STATE)
                                                VALUES('PROC_SAMPLING.PROC.SAMPLE_PROCEDURE','PERCENTAGE ERROR- MUST BE >0 AND <= 100',:SQLCODE,:SQLERRM,:SQLSTATE);     
        WHEN OTHER THEN INSERT INTO PROC_SAMPLING.WORK.SP_ERROR_LOGS(PROC_NAME, ERROR_TYPE, ERROR_CODE, ERROR_MESSAGE, SQL_STATE)
                                                VALUES('PROC_SAMPLING.PROC.SAMPLE_PROCEDURE','OTHERS',:SQLCODE,:SQLERRM,:SQLSTATE);

    END;

$$;

SELECT * FROM PROC_SAMPLING.WORK.SP_ERROR_LOGS; -- 0 RECORDS;

SELECT * FROM PROC_SAMPLING.INSERTION_TABLE.SAMPLE_DUMMY_TABLE;-- 0 RECORDS;
    

CALL PROC_SAMPLING.PROC.SAMPLE_PROCEDURE('SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER','PROC_SAMPLING.INSERTION_TABLE.SAMPLE_DUMMY_TABLE','B',0.20);

SELECT * FROM PROC_SAMPLING.INSERTION_TABLE.SAMPLE_DUMMY_TABLE;



---------------------------------------------------------------------------------------------------------------------------------------------


