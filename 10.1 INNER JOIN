CREATE DATABASE RM_JOINS;
USE DATABASE RM_JOINS;

/* The inner join is one of the most commonly used join statement in SQL Server. 
A join lets us combine results from two or more tables into a single result set. 
It includes only those results which are common to both the tables. 

Syntax
The following is the syntax of inner join.
 
SELECT <Columns> 
FROM tableA 
INNER JOIN tableB
ON (join_condition)

The join_condition defines the condition on which the tables are joined. 
This condition is evaluated for each row of the result. 
If the condition is evaluated to true, then the rows are joined and added to the result set.

If the conditions do not match, then the rows are ignored and not added to the result set

The word INNER is not necessary as it is the default. 

Hence the following statement is the same as the above 

Sample database
Consider the following tables from the table reservation system of a restaurant

CustomerType : Customers are defined as VIP / Regular
Customers: List of customers with Customer Type.
Tables: The list of tables available in the restaurant. CustomerID field indicates that the customer has reserved the table.
Orders : The orders placed by the customer
DiscVoucher: The discounts are offered based on the total value of the order
*/

create or replace table customerType 
   CustomerTypeID int null,
   CONSTRAINT FK_Customers_CustomerTypeID FOREIGN KEY (CustomerTypeID) REFERENCES customerType (CustomerTypeID)
);



 
insert into Customers values(1, 'Kevin Costner',1);
insert into Customers values(2, 'Akshay Kumar',2);
insert into Customers values(3, 'Sean Connery',1);
insert into Customers values(4, 'Sanjay Dutt',2);
insert into Customers values(5, 'Sharukh Khan',null);
 
 
create Or replace table Tables 
(
   TableNo int primary key,
   CustomerID int null,
   CONSTRAINT FK_Tables_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
);
 
insert into Tables values(1, null);
insert into Tables values(2, 1);
insert into Tables values(3, 2);
insert into Tables values(4, 5);
insert into Tables values(5, null);
 
 
create or replace table Orders 
(
   OrderNo int primary key,
   OrderDate datetime,
   CustomerID int null,
   Amount decimal(10,2),
   CONSTRAINT FK_Orders_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
);
 
insert into Orders Values(1,'2019-12-10',1,5000);
insert into Orders Values(2,'2019-12-09',1,3000);
insert into Orders Values(3,'2019-12-10',2,7000);
insert into Orders Values(4,'2019-12-01',2,7000);
insert into Orders Values(5,'2019-12-10',3,1000);
insert into Orders Values(6,'2019-12-03',3,1000);
insert into Orders Values(7,'2019-12-10',4,3000);
insert into Orders Values(8,'2019-12-10',2,4000);
 
create or replace table DiscVoucher (
   FromAmount decimal(10,0) ,
   UptoAmount decimal(10,0) ,
   Discount decimal(10,0)
);
 
insert into DiscVoucher Values(0,3000,0);
insert into DiscVoucher Values(3001,8000,10);
insert into DiscVoucher Values(8001,99999,25) ;

SELECT * FROM customerType;
select * from Customers;
select * from Tables;
select * from Orders;
select * from DiscVoucher;

--------------------------------------------------------------------------------------------------------------


-- FIND TOTAL ORDER PLACED BY EACH CUSTOMER. 

-- My code:

select CustomerID, Name, SUM(Amount) as Total_revenue,Customer_type  FROM 
(
select c.CustomerID,c.Name ,o.OrderNo,o.Amount,c1.Name AS Customer_type FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID 
JOIN customerType c1 ON c.CustomerTypeID = c1.CustomerTypeID
) AS ALias_table
GROUP BY CustomerID -- note this works fine but on snowflake it would ask for Name and custimer_type column here since they are not part of groupby would show error
ORDER BY Total_revenue DESC; 


select CustomerID, Name, SUM(Amount) as Total_revenue,Customer_type  FROM 
(
select c.CustomerID,c.Name ,o.OrderNo,o.Amount,c1.Name AS Customer_type FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID 
JOIN customerType c1 ON c.CustomerTypeID = c1.CustomerTypeID
) AS ALias_table
GROUP BY CustomerID ,Name, Customer_type
ORDER BY Total_revenue DESC; 


SELECT Name, SUM(Amount) as total_spending FROM
(
	select 
		 c.Name,
		 o.Amount
	FROM Customers c
	INNER JOIN Orders o ON c.CustomerID = o.CustomerID
) AS alias_table
GROUP BY Name
ORDER BY total_spending DESC;

-- Anand's Code:

Select Cu.CustomerID,Cu.Name, Ord.Amount, ct.Name as CustomerType
From Customers Cu
join ( Select CustomerID, Sum(Amount) As Amount
       From Orders 
       Group by CustomerID) Ord On Cu.CustomerID= Ord.CustomerID
join customerType ct on cu.CustomerTypeID = ct.CustomerTypeID;


------------------------------------------------------------------------------------------------------------------------------------------------------

-- Multiple Conditions in Join
-- You can use more than one condition in the join condition. 
-- The following query joins the customer table with the order table using both the CustomerId and OrderDate column.

select Cu.CustomerID, Cu.Name, Ord.OrderDate, Ord.Amount
From Customers Cu
join Orders Ord On Cu.CustomerID = Ord.CustomerID and OrderDate='2019-12-10';


select c.CustomerID, c.Name,O.OrderDate FROM 
Customers c INNER JOIN Orders o ON c.CustomerID = O.CustomerID AND OrderDate = '2019-12-10';

select c.CustomerID, c.Name,O.OrderDate FROM 
Customers c INNER JOIN Orders o ON c.CustomerID = O.CustomerID
WHERE  OrderDate = '2019-12-10'; -- Also Possible using Where Clause. 

-- The customers are given a discount voucher based on their spend. 
-- We need to join the DiscVoucher table to find out the discount.


select 
    Name, 
    Sum(Amount) as Total_bill,
    CASE 
			When Sum(Amount) >= 0 and SUM(Amount) <= 3000 THEN 0
            When  Sum(Amount) >= 3001 and  Sum(Amount) <= 8000 Then 10
            When  Sum(Amount) >= 8001 and  Sum(Amount) <= 99999 then 25
	End as eligible_discount
From
(
select c.Name,o.Amount from Customers c inner join Orders o on c. CustomerId = o.CustomerID
) as alias_name
GROUP BY Name;

-- Using only Join 

select Name, bill_amount, d.Discount From
(
select c.Name, sum(o.Amount) as bill_amount from Customers c Inner Join Orders O On c.CustomerID = o.CustomerID GROUP BY c.Name
) as alias_name 
JOIN DiscVoucher d ON alias_name.bill_amount >= d.FromAmount and alias_name.bill_amount <= d.UptoAmount;








