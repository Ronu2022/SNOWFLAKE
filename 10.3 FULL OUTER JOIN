CREATE DATABASE RM_FULL_OUTER;
USE RM_FULL_OUTER;


/*The Full Join (Also known as Full Outer join) includes the rows from both the tables. 
Wherever the rows do not match a null value is assigned to every column of the table that does not have a matching row. 
A Full join looks like a Right Join & Left Join combined together in one query. 

Syntax
The syntax of the Full join is as follows
 
SELECT <Columns>   
FROM tableA 
FULL JOIN tableB
ON (join_condition)

The matching rows from both tables
All the unmatched rows from Table A with null for columns from Table B
All the unmatched rows from Table B with null for columns from Table A
 
The join_condition defines the condition on which the tables are joined.

All the rows from both the tables are included in the final result. 
A NULL value is assigned to every column of the table that does not have a matching row based on the join condition.

The FULL OUTER JOIN & FULL JOIN are the same. The Keyword OUTER is optional

Sample database
Consider the following tables from the table reservation system of a restaurant. You can use the following script to create the database

CustomerType : Type of Customer like VIP / Regular etc
insert into Customers values(5, 'Sharukh Khan',null);
 
 
create table Tables 
(
   TableNo int primary key,
   CustomerID int null,
   CONSTRAINT FK_Tables_CustomerID FOREIGN KEY (CustomerID)
      REFERENCES Customers (CustomerID)
);
 
insert into Tables values(1, null);
insert into Tables values(2, 1);
insert into Tables values(3, 2);
insert into Tables values(4, 5);
insert into Tables values(5, null);
 
 
create table Orders 
(
   OrderNo int primary key,
   OrderDate datetime,
   CustomerID int null,
   Amount decimal(10,2),
   CONSTRAINT FK_Orders_CustomerID FOREIGN KEY (CustomerID)
      REFERENCES Customers (CustomerID)
);
 
insert into Orders Values(1,'2019-12-10',1,5000);
insert into Orders Values(2,'2019-12-09',1,3000);
insert into Orders Values(3,'2019-12-10',2,7000);
insert into Orders Values(4,'2019-12-01',2,7000);
insert into Orders Values(5,'2019-12-10',3,1000);
insert into Orders Values(6,'2019-12-03',3,1000);
insert into Orders Values(7,'2019-12-10',4,3000);
insert into Orders Values(8,'2019-12-10',2,4000);
 
create table DiscVoucher 
(
   FromAmount decimal(10,0) ,
   UptoAmount decimal(10,0) ,
   Discount decimal(10,0)
);
 
insert into DiscVoucher Values(0,3000,0);
insert into DiscVoucher Values(3001,8000,10);
insert into DiscVoucher Values(8001,99999,25)  ;


--Query
--------------------------------------------------------------------------------------------------------------------------------

- could be asked ininterview to suggest the number of records.
drop table x;

CREATE TABLE x (
    a VARCHAR(30)
); 

INSERT INTO x VALUES
('1'),
('1'),
('2'),
('2'),
('3'),
(NULL),
(NULL),
(''),
('7');

drop table y; 
CREATE TABLE y (
    b VARCHAR(30)
); 

INSERT INTO y VALUES
('8'),
('3'),
('4'),
('1'),
('1'),
('2'),
('2'),
('3'),
(''),
(''),
(''),
('5'),
(NULL),
(NULL);




select * from x; 
select * from y; 
select x.a,y.b from x inner join y on x.a = y.b; 
select x.a,y.b from x left join y on x.a = y.b; 
select x.a,y.b from x right join y on x.a = y.b;

select x.a,y.b from x full outer join y on x.a = y.b; 


select * from 
(

select x.a,y.b from x full outer join y on x.a = y.b 
) as alias_name
 where a IS NULL or B is NULL or (a is NULL and B is NULL); 


--------------------------------------------------------------------------------------------------------------------------------
